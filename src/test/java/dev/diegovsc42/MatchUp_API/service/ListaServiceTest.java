package dev.diegovsc42.MatchUp_API.service;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
class ListaServiceTest {

    @Autowired
    private ListaService listaService;

    @Nested
    @DisplayName("extrairNomes")
    class ExtrairNomesTests {

        @Test
        @DisplayName("Deve extrair nomes de lista formatada com n√∫meros e ponto (ex: '1. Nome')")
        void test1() {
            String lista = """
                Futebol s√°bado 19h30 √†s 21h30
                1. Caio
                2. Let√≠cia
                3. Eduardo
                4. Tiago
                5. √çcaro
                6. Rafael
                7. Bruna
                8. Wellington
                9. Douglas (a partir das 20h)
                10. Vit√≥ria
                11. Marcelo
                12. Luana
                13. Bruno
                """;
            List<String> esperado = List.of(
                    "Caio", "Let√≠cia", "Eduardo", "Tiago", "√çcaro", "Rafael", "Bruna",
                    "Wellington", "Douglas (a partir das 20h)", "Vit√≥ria", "Marcelo", "Luana", "Bruno");
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

        @Test
        @DisplayName("Deve retornar lista vazia quando a entrada for vazia")
        void test2() {
            String lista = "";
            List<String> esperado = new ArrayList<>();
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

        @Test
        @DisplayName("Deve extrair nomes de lista formatada com n√∫meros e h√≠fen (ex: '1 - Nome')")
        void test3() {
            String lista = """
                Quem vai quarta?\s
                21:00 as 23:00

                1 - Daniel
                2 - Larissa
                3 - Caio
                4 - Let√≠cia
                5 - Juliana
                6 - Alexandre
                7 - Lu√≠sa
                8 - Gabriela
                9 - F√°bio
                10 - Renata
                11 - La√≠s
                12- Vin√≠cius\s
                13- Renan\s
                14- Rafael
                15- Tiago
                """;
            List<String> esperado = List.of(
                    "Daniel", "Larissa", "Caio", "Let√≠cia", "Juliana", "Alexandre", "Lu√≠sa",
                    "Gabriela", "F√°bio", "Renata", "La√≠s", "Vin√≠cius", "Renan", "Rafael", "Tiago");
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

        @Test
        @DisplayName("Deve extrair nomes mesmo com espa√ßos irregulares ao redor do separador")
        void test4() {
            String lista = """
                1  -    Jo√£o
                2.     Maria
                3     -Pedro
                4.Ana
                """;
            List<String> esperado = List.of("Jo√£o", "Maria", "Pedro", "Ana");
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

        @Test
        @DisplayName("Deve ignorar linhas que n√£o cont√™m padr√£o de lista numerada")
        void test5() {
            String lista = """
                Lista do futsal ‚öΩ
                Confirmados:

                1 - Bruno
                2 - Clara

                Avise se n√£o puder ir!
                3 - Felipe
                """;
            List<String> esperado = List.of("Bruno", "Clara", "Felipe");
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

        @Test
        @DisplayName("Deve manter nomes duplicados quando presentes na lista original")
        void test6() {
            String lista = """
                1 - Tiago
                2 - Tiago
                3 - Let√≠cia
                """;
            List<String> esperado = List.of("Tiago", "Tiago", "Let√≠cia");
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

        @Test
        @DisplayName("Deve extrair nomes com caracteres especiais (acentos, h√≠fens, pontos)")
        void test7() {
            String lista = """
                1 - Jos√©
                2 - Andr√©
                3 - M√°rio Jr.
                4 - Jo√£o-Paulo
                """;
            List<String> esperado = List.of("Jos√©", "Andr√©", "M√°rio Jr.", "Jo√£o-Paulo");
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

        @Test
        @DisplayName("Deve extrair nomes mesmo com numera√ß√£o fora de ordem sequencial")
        void test8() {
            String lista = """
                3 - Caio
                1 - Tiago
                2 - Rafael
                """;
            List<String> esperado = List.of("Caio", "Tiago", "Rafael");
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

        @Test
        @DisplayName("Deve extrair nomes corretamente mesmo com espa√ßos n√£o vis√≠veis (ex: NBSP)")
        void test9() {
            String lista = """
                1 -  Tiago
                2 -¬†Rafael
                3 - ¬†¬†Luana
                """;
            List<String> esperado = List.of("Tiago", "Rafael", "Luana");
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

        @Test
        @DisplayName("Deve extrair nomes que contenham emojis junto ao texto")
        void test10() {
            String lista = """
                1 - Ana üèê
                2 - Juliana üéâ
                """;
            List<String> esperado = List.of("Ana üèê", "Juliana üéâ");
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

        @Test
        @DisplayName("Deve extrair nomes quando separadores forem tabula√ß√µes ao inv√©s de espa√ßos")
        void test11() {
            String lista = "1\t-\tCaio\n2\t-\tLet√≠cia\n3\t-\tDouglas";
            List<String> esperado = List.of("Caio", "Let√≠cia", "Douglas");
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

        @Test
        @DisplayName("Deve extrair nomes compostos ou com pontua√ß√£o (h√≠fens, v√≠rgulas)")
        void test12() {
            String lista = """
                1 - Jo√£o-Paulo
                2 - Maria Clara
                3 - Ana, a madrinha
                """;
            List<String> esperado = List.of("Jo√£o-Paulo", "Maria Clara", "Ana, a madrinha");
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

        @Test
        @DisplayName("Deve extrair nomes independentemente do tipo de separador (-, *, =>, .)")
        void test13() {
            String lista = """
                1 - Caio
                2 * Let√≠cia
                3 => Tiago
                4 . Rafael
                """;
            List<String> esperado = List.of("Caio", "Let√≠cia", "Tiago", "Rafael");
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

        @Test
        @DisplayName("Deve extrair nomes de lista n√£o numerada (um nome por linha, sem prefixos)")
        void test14() {
            String lista = """
            V√¥lei s√°bado 19h30 √†s 21h30
            Marco
            
            Leandro
            
            Renato
            
            Rog√©rio
            
            Caio
            
            Nina
            
            Let√≠cia
            
            Daniel
            
            Eduardo\s
            
            Camila
            
            Ot√°vio
            
            Fernanda
            
            Gustavo
            
            Rafael
            
            Beatriz
            
            Pedro
            
            Carolina
            
            Vinicius
            
            J√∫lia
            
            Thiago
            
            Larissa
        """;
            List<String> esperado = List.of(
                    "Marco", "Leandro", "Renato", "Rog√©rio", "Caio", "Nina",
                    "Let√≠cia", "Daniel", "Eduardo", "Camila", "Ot√°vio", "Fernanda",
                    "Gustavo", "Rafael", "Beatriz", "Pedro", "Carolina", "Vinicius",
                    "J√∫lia", "Thiago", "Larissa"
            );
            List<String> resultado = listaService.extrairNomes(lista);
            assertThat(resultado).isEqualTo(esperado);
        }

    }
}
